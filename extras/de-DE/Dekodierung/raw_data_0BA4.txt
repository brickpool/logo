// version
02 1f 02
send> 02 1F 02 
recv< 06 03 1F 02 40 

// status
55 17 17 aa
send> 55 17 17 AA 
recv< 06 01 

// stop
55 12 12 aa
send> 55 12 12 AA 
recv< 06 

// firmware
send> 02 1F 02 
recv< 06 03 1F 02 40 
// no read firmware for 0BA4 !
// LOGO!Soft stops here

// read bytes for version firmware manually
send> 02 1F 02 
recv< 06 03 1F 02 40 
send> 02 1F 03 
recv< 06 03 1F 03 00 
send> 02 1F 04 
recv< 06 03 1F 04 00 
send> 02 1F 05 
recv< 06 03 1F 05 00 
send> 02 1F 06 
recv< 06 03 1F 06 00 
send> 02 1F 07 
recv< 06 03 1F 07 00 
send> 02 1F 08 
recv< 06 03 1F 08 00 


// read 10 bytes from 0570 @STOP -> Program Name
send> 05 05 70 00 10 
recv< 06 
recv< 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E 4F 50 10 

// read 1 byte @0552 @STOP -> display after power-on
// 00 Programmname ?? (LOGO! ohne Uhr)
// 01 input / output
send> 02 05 52 
recv< 06 03 05 52 00 


// read 10 bytes from 0E20 @STOP
send> 05 0E 20 00 0A 
recv< 06 80 00 0A 80 FF FF FF FF FF FF 0A

// operation mode status
send> 55 17 17 AA 
recv< 06 42 

// start
send> 55 18 18 AA 
recv< 06 

// monitor @RUN
send> 55 13 13 00 AA 
recv< 06 
recv< 55 11 11 40 00
38 CA 11 2A
00
01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
AA 

// text box 10;
// 64 bytes / each text box
send> 05 08 00 02 80 
recv< 06 
recv< 01 00 31 32 33 34 35 36 20 20 20 20 20 20 00 00
01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
recv< FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF 
recv< 00 00 00 00 00 00 00 00 00 00 00 00 00 FF 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF 00 

// Amount of data, Memory area Limit of used blocks for the Program Memory Area
// (Function block number 130)
send> 05 0C 00 01 18 
recv< 06 00 00 14 00 28 00 3C 00 50 00 64 00 78 00 8C 00 A0 00 B4 00 C8 00 FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF 
recv< FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF 


// Digital output Q [1_16]
// 2 * 20 bytes = 2Byte <80 00> + 16Byte <Data> + 2Byte <FF FF>
// XOR
send> 05 0E 20 00 28 
recv< 06
80 00
0A 80 FF FF FF FF FF FF FF FF FF FF FF FF FF FF
FF FF
80 00
FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF 
FF FF 
8A 


// Example 2
// Q2 and Q16 high
send> 55 12 12 AA 
recv< 06 
send> 05 0E 20 00 28 
recv< 06
80 00
FF FF FD 00 FF FF FF FF FF FF FF FF FF FF FF FF
FF FF
80 00
FF FF FF FF FF FF FF FF FF FF FF FF FF FF FD 00
FF FF
00


// read clock
send> 55 17 17 AA 
recv< 06 42 
send> 01 44 00 00 
recv< 06 
send> 02 FB 00 
recv< 06 03 FB 00 03 
send> 02 FB 01 
recv< 06 03 FB 01 03 
send> 02 FB 02 
recv< 06 03 FB 02 12 
send> 02 FB 03 
recv< 06 03 FB 03 0E 
send> 02 FB 04 
recv< 06 03 FB 04 0C 
send> 02 FB 05 
recv< 06 03 FB 05 06 
*** 03.03.18 12:18 Schaltplan1.lsc
*** Uhrzeit lesen erfolgreich


// read summer/winter time
send> 55 17 17 AA 
recv< 06 42 
send> 01 44 00 01 
recv< 06 
send> 02 FB 00 
recv< 06 03 FB 00 01 
send> 02 FB 01 
recv< 06 03 FB 00 01 
send> 02 FB 02 
recv< 06 03 FB 02 01 
send> 02 FB 03 
recv< 06 03 FB 03 01 
send> 02 FB 04 
recv< 06 03 FB 04 01 
send> 02 FB 05 
recv< 06 03 FB 05 00 
*** 03.03.18 12:37 Schaltplan1.lsc
*** Sommer-/Winterzeit lesen
0BA4.Standard
EU
Lesen erfolgreich


// read password
send> 21 
send> 02 1F 02 
recv< 06 03 1F 02 40 
send> 55 17 17 AA 
recv< 06 42 
send> 01 47 40 00 
recv< 06 
send> 02 1F 00 
recv< 06 03 1F 00 04 
send> 02 1F 01 
recv< 06 03 1F 01 00 
send> 02 48 FF 
recv< 06 03 48 FF 40 
send> 05 05 66 00 0A 
recv< 06 
recv< 41 42 43 00 00 00 00 00 00 00 40 

// read program from LOGO -> PC
55 17 17 AA
01 48 00 00
05 05 c0 00 40
05 06:00:02:00
05 08:00:02:80
05 0c:00:01:18
05 0e:20:00:28
05 0e:40:00:3c
05 0E 84 00 14
05 0E 98 00 28
05 0e:c0:00:28
05 0E E8 07 D0
// 2.3 sec
05 05:70:00:10
05 05:66:00:0a
02:05:5e
02 05 5F
55 17 17 AA
00
*** 03.03.18 12:52 
*** LOGO! --> PC
0BA4.Standard
Übertragung LOGO! --> PC erfolgreich

// clear password
send> 21 
send> 02 1F 02 
recv< 06 03 1F 02 40 
send> 55 17 17 AA 
recv< 06 42 
send> 01 47 40 00 
recv< 06 
send> 02 1F 00 
recv< 06 03 1F 00 04 
send> 02 1F 01 
recv< 06 03 1F 01 00 
send> 02 48 FF 
recv< 06 03 48 FF 40 
send> 04 05 66 00 0A 00 00 00 00 00 00 00 00 00 00 01 
recv< 06 06

// check if clearing password
send> 02 1F 02 
recv< 06 03 1F 02 40 
send> 55 17 17 AA 
recv< 06 42 
send> 01 47 40 00 
recv< 06 
send> 02 1F 00 
recv< 06 03 1F 00 04 
send> 02 1F 01 
recv< 06 03 1F 01 00 
send> 02 48 FF 
recv< 06 03 48 FF 00


// read program name
send> 05 05 70 00 10 
recv< 06 
recv< 48 65 6C 6C 6F 20 77 6F 72 6C 64 21 20 20 20 20 21 

// write program name
send> 04 05 70 00 10 48 65 6C 6C 6F 20 77 6F 72 6C 64 21 20 20 20 20 21 
recv< 06 
recv< 06 

// XOR error
send> 04 05 70 00 10 48 65 6C 6C 6F 20 77 6F 72 6C 64 21 20 20 20 20 21 
recv< 06 
recv< 06 
send> 04 05 70 00 10 48 65 6C 6C 6F 20 77 6F 72 6C 64 21 20 20 20 20 00 
recv< 06 
recv< 15 06 

